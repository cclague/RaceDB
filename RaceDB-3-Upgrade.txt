If you are currently running a RaceDB 1.X.X, you need to follow these upgrade steps to get to 3.X.X.
You only need to do this once.
After you are on RaceDB 3.X.X, upgrades will work as described in Install-Readme.txt (easier).

RaceDB should work the same after the upgrade including the interface to the chip reader, CrossMgr download/upload, PDF generation, etc. etc.
However, leave yourself some time before an event to do the upgrade and to check out things afterward.
Testing has been extensive, but there is always the case there is something in your data that doesn't work.
All related fixes are generally easy and I should be able to turn the around quickly.

These instructions are designed to be safe - you can return to the old RaceDB if something goes wrong.
THe reality is that Python2.7 going out of support in 2020.  Python3 is a necessary
requirement for continued support.

***********************************************************************
High Level Overview

Before upgrading to the new RaceDB, you will export your database into a file.
Then, you rename the existing install RaceDB_old
Upgrade to Python3, then upgrade to RaceDB3 into a new RaceDB folder.
In the new RaceDB install, you create an empty database, then you import the previous data into the new database.

If something goes horribly wrong, you have not deleted anything and can revert to the previous version.
If everything works, you can delete the RaceDB_old folder you created.

Make sense?  Let's get started:

***********************************************************************
Step 1: Make a RaceDB.json file from your current database.

In the folder with your existing RaceDB, run the following command:

  python manage.py dumpdata core -o RaceDB.json
  
This will create a file called RaceDB.json containing all your database data.
It may be large (50-100Meg).

***********************************************************************
Step 2: Make a backup of your RaceDB folder.

For safety, now is the time to make a backup of your entire RaceDB folder.
Copy it to a flash drive, or to some other location you can recover it from.

***********************************************************************
Step 3: Rename your existing RaceDB folder to RaceDB_old.

Rename your existing RaceDB folder to RaceDB_old.  Don't copy it.  Rename it.
Note: on Windows, make sure you don't have any cmd windows cd'd into this folder.
If you do, the rename won't work.  Close these cmd windows, or do "cd \" to get out of the RaceDB folder.

***********************************************************************
Step 4: Install Python 3.

Windows:
First de-install Python 2.7.
Now, check that ...\Python2\... is no longer in your PATH environment variable.
Install Python 3.X from https://www.python.org/.
If give the option, add Python3 to the PATH variable.

Linux:
Python3 may already be installed.  Check your distro if de-installing Python 2.7 will cause instability.
Check your distro for how to de-install Python 2.7 and install Python3.

After installing python3, test your install.  On a command line, type:

  python --version
  
You should see:

  Python 3.X.X

Where X.X is the specific version.
If you still see Python 2.7, check your path.
If you are on Linux, try "python3 --version".  If "python3" works, you will need to type "python3" to run RaceDB going forward.

***********************************************************************
Step 5: Install the new version of RaceDB.

Download RaceDB 3.X.X and unzip it next to the RaceDB_old folder.
Make sure that RaceDB unzips into a "clean" folder.  You should not be replacing any files when you unzip.
This will be the case if you renamed your old RaceDB folder to RaceDB_old in Step 5.

***********************************************************************
Step 6: Update the dependencies.

In the new RaceDB folder, enter:

  python dependencies.py

***********************************************************************
Step 7: Initialize the new database.

If you are using the default RaceDB.sqlite3 database, in the new RaceDB folder, enter:

  python manage.py migrate

If you are running on a hosted server:
  - copy your time_zone.py file from RaceDB_old/RaceDB to RaceDB/RaceDB.

If you have configured RaceDB to use another database (eg. MySql, PostGres), follow these steps:
  - copy your DatabaseConfig.py file from RaceDB_old/RaceDB to RaceDB/RaceDB.
  - log into your database and rename your existing RaceDB database to something else (I recommend the same name with '_old' on the end).
  - while logged into your database, create a new RaceDB database and give it the same username and password as the old database.
  - exit the database prompt
  - in the new RaceDB folder enter:
  
      python manage.py migrate

***********************************************************************
Step 8: Transfer your existing data.

In the new RaceDB folder, enter:

Windows:
  python manage.py loaddata ..\RaceDB_old\RaceDB.json

Linux:
  python3 manage.py loaddata ../RaceDB_old/RaceDB.json
  
This may take a few minutes and the program may appear to have hung.
Be patient!  Everything will be fine - just let it run to completion.

***********************************************************************
Step 9: Launch RaceDB

  python manage.py launch

Congradulations!  You have upgraded RaceDB!

The default login names and passwords ("super", etc.) will be set up for you.
Going forward, you can apply upgrades as usual as described in Install-Readme.txt.

If after a few weeks everything is working properly, you can delete the RaceDB_old folder.  Keep the backup for a while just in case.

**Note:  if you have created additional RaceDB users, or changed the passwords of the stock RaceDB users, you will have to configure this again.


